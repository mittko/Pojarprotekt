package Reports;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import run.JustFrame;
import utility.ArtikulsListComboBox;
import utility.ClientsListComboBox2;
import utility.EditableField;
import utility.MainPanel;
import utility.NewExtinguishersComboBox;
import Date.GetDate;
import Local.TextReader;
import Reports.gui_edt.EDTAcquitance;
import Reports.gui_edt.EDTArtikuls;
import Reports.gui_edt.EDTAvailability;
import Reports.gui_edt.EDTDelivery;
import Reports.gui_edt.EDTInvoice;
import Reports.gui_edt.EDTNewExtinguishers;
import Reports.gui_edt.EDTSO_Pr_Br;
import Reports.gui_edt.EDTSales;
import db.Common;
import db.NewExtinguisher.NewExtinguishers_DB;
import db.Report.ReportRequest;

public class ReportDialog extends MainPanel {
	private JPanel eastPanel = null;

	private JMenuBar menuBar = null;
	private JMenu menu = null;
	private ButtonGroup bGroup = null;
	private JRadioButtonMenuItem rbmi = null;
	private JRadioButtonMenuItem rbmi2 = null;
	private JRadioButtonMenuItem rbmi3 = null;
	private JRadioButtonMenuItem rbmi4 = null;
	private JRadioButtonMenuItem rbmi5 = null;
	private JRadioButtonMenuItem rbmi6 = null;
	private JRadioButtonMenuItem rbmi7 = null;
	private JRadioButtonMenuItem rbmi8 = null;
	// private JMenu deliveryMenu = new JMenu("Доставки");
	private JRadioButtonMenuItem rbmi9 = null;
	private JRadioButtonMenuItem rbmi9А = null;
	private JRadioButtonMenuItem rbmi10 = null;
	private JRadioButtonMenuItem rbmi11 = null;

	private EditableField fromDate = null;
	private EditableField toDate = null;
	private EditableField so_field = null;
	private EditableField prot_field = null;
	private EditableField fact_field = null;
	private EditableField acquittanceField = null;
	private EditableField serial = null;
	private EditableField barcod = null;
	private ArtikulsListComboBox artikulsComboBox;
	private NewExtinguishersComboBox newExtinguishersComboBox;

	private ClientsListComboBox2 clientCombo = null;

	private JPanel westPanel = null;
	private Object[] wheightFire = null;
	private Object[] brandFire = null;
	private JComboBox<Object> typeCombo = null;
	private JComboBox<Object> wheightCombo = null;
	private JComboBox<Object> catCombo = null;
	private JComboBox<Object> brandCombo = null;
	private JComboBox<Object> doingCombo = null;

	private JPanel basePanel = null;
	private JPanel moreWidthPanel = null;

	private JButton searchButton = null;
	// private final String hexColor = "0xFFBD0A";

	private String destination = null;
	public static final String SO_Title = "Сервизна Поръчка";
	public static final String Protokol_Title = "Протокол";
	public static final String Brack_Title = "Брак";
	private String title = null;
	private String invoiceTitle = null;
	private String No = "";
	public JustFrame clientFrame = null;
	public JustFrame reportTableFrame = null;
	public JustFrame invoiceTableFrame = null;

	ArrayList<Object[]> d = null;

	public ReportDialog() {

		basePanel = new JPanel();

		basePanel.setOpaque(false);
		basePanel.setLayout(new GridLayout(1, 2, 100, 10));

		eastPanel = new JPanel();
		eastPanel.setOpaque(false);
		eastPanel.setLayout(new GridLayout(12, 1, 10, 10));

		menuBar = new JMenuBar();
		menuBar.setBorder(BorderFactory.createLineBorder(Color.black, 1));

		menu = new JMenu("Търсене във :                 ");
		menu.setCursor(new Cursor(Cursor.HAND_CURSOR));
		menu.setPreferredSize(new Dimension(230, 30));
		menu.setBorder(BorderFactory.createRaisedBevelBorder());

		bGroup = new ButtonGroup();
		rbmi = new JRadioButtonMenuItem("Сервизна Поръчка");
		rbmi.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				destination = SERVICE;
				title = rbmi.getText();
				setComponentState(true, false, false, false, true, true, false,
						false, true, true, true, true, false);
			}

		});

		rbmi2 = new JRadioButtonMenuItem("Протоколи");
		rbmi2.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi2.getText();
				destination = PROTOKOL;
				setComponentState(false, true, false, false, true, true, false,
						false, true, true, true, true, true);
			}

		});
		rbmi3 = new JRadioButtonMenuItem("Брак");
		rbmi3.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				title = rbmi3.getText();
				destination = BRACK;
				setComponentState(false, true, false, false, true, true, false,
						false, true, true, true, true, false);
			}

		});
		rbmi4 = new JRadioButtonMenuItem("Фактури");
		rbmi4.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi4.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi4.getText();
				destination = INVOICE_PARENT;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});

		rbmi5 = new JRadioButtonMenuItem("Про-форма фактура");
		rbmi5.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi5.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi5.getText();
				destination = PROFORM_PARENT;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});

		rbmi6 = new JRadioButtonMenuItem("Стокови Разписки");
		rbmi6.setVisible(ACCESS_MENU[6]);
		rbmi6.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi6.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi6.getText();
				destination = ACQUITTANCE_PARENT;
				setComponentState(false, false, false, true, false, false,
						true, false, false, false, false, false, false);
			}

		});

		rbmi7 = new JRadioButtonMenuItem("Артикули");
		rbmi7.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi7.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi7.getText();
				destination = AVAILABLE_ARTIKULS;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});

		rbmi8 = new JRadioButtonMenuItem("Нови Пожарогасители");
		rbmi8.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi8.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi8.getText();
				destination = NEW_EXTINGUISHERS;
				setComponentState(false, false, true, false, false, false,
						false, true, false, false, false, false, false);
			}

		});

		rbmi9 = new JRadioButtonMenuItem("Доставки Артикули");
		rbmi9.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi9.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi9.getText();
				destination = DELIVERY_ARTIKULS;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});
		rbmi9А = new JRadioButtonMenuItem("Доставки Нови Пожарогасители");
		rbmi9А.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi9А.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi9А.getText();
				destination = DELIVERY_ARTIKULS;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});
		rbmi10 = new JRadioButtonMenuItem("Продажби");
		rbmi10.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi10.addActionListener(new ActionListener() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * java.awt.event.ActionListener#actionPerformed(java.awt.event.
			 * ActionEvent)
			 */
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi10.getText();
				destination = SELLS;
				setComponentState(false, false, true, false, false, false,
						true, false, false, false, false, false, false);
			}

		});
		rbmi11 = new JRadioButtonMenuItem("Наличност");
		rbmi11.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi11.addActionListener(new ActionListener() {

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * java.awt.event.ActionListener#actionPerformed(java.awt.event.
			 * ActionEvent)
			 */
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi11.getText();
				destination = AVAILABILITY;
				setComponentState(false, false, false, false, false, false,
						true, false, false, false, false, false, false);
			}

		});
		bGroup.add(rbmi);
		menu.add(rbmi);

		menu.addSeparator();

		bGroup.add(rbmi2);
		menu.add(rbmi2);
		menu.addSeparator();

		bGroup.add(rbmi3);
		menu.add(rbmi3);
		menu.addSeparator();

		bGroup.add(rbmi4);
		menu.add(rbmi4);
		menu.addSeparator();

		bGroup.add(rbmi5);
		menu.add(rbmi5);
		menu.addSeparator();

		bGroup.add(rbmi6);
		menu.add(rbmi6);
		menu.addSeparator();

		bGroup.add(rbmi7);
		menu.add(rbmi7);
		menu.addSeparator();

		bGroup.add(rbmi8);
		menu.add(rbmi8);
		menu.addSeparator();

		// deliveryMenu.add(rbmi9);
		// deliveryMenu.add(rbmi9А);

		bGroup.add(rbmi9);
		menu.add(rbmi9);
		menu.addSeparator();

		bGroup.add(rbmi10);
		menu.add(rbmi10);
		menu.addSeparator();

		bGroup.add(rbmi11);
		menu.add(rbmi11);

		menuBar.add(menu);

		Dimension fieldDimension = new Dimension(20, 40);

		fromDate = new EditableField("От XX.XX.XXXX", 12);
		fromDate.setPreferredSize(fieldDimension);

		toDate = new EditableField("До XX.XX.XXXX", 12);
		toDate.setPreferredSize(fieldDimension);

		so_field = new EditableField("Сервизна Поръчка", 12);
		so_field.setPreferredSize(fieldDimension);

		prot_field = new EditableField("Протокол", 12);
		prot_field.setPreferredSize(fieldDimension);

		fact_field = new EditableField("Фактура", 12);
		fact_field.setPreferredSize(fieldDimension);

		acquittanceField = new EditableField("Стокови Разписки", 12);
		acquittanceField.setVisible(ACCESS_MENU[6]);
		acquittanceField.setPreferredSize(fieldDimension);

		serial = new EditableField("Монтажен Номер", 12);
		serial.setPreferredSize(fieldDimension);

		barcod = new EditableField("Баркод", 12);
		barcod.setPreferredSize(fieldDimension);

		artikulsComboBox = new ArtikulsListComboBox();

		newExtinguishersComboBox = new NewExtinguishersComboBox();

		clientCombo = new ClientsListComboBox2();
		clientCombo.setPreferredSize(new Dimension(230, 30));
		clientCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		westPanel = new JPanel();
		westPanel.setOpaque(false);
		GridLayout westLayout = new GridLayout(11, 1, 10, 10);
		westPanel.setLayout(westLayout);

		JLabel typeLabel = new JLabel("Вид");
		typeLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		typeCombo = new JComboBox<Object>(new Object[] { "",
				MainPanel.type_Prah_BC, MainPanel.type_Prah_ABC,
				MainPanel.type_Water, MainPanel.type_Water_Fame,
				MainPanel.type_CO2 });
		typeCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel wheightLabel = new JLabel("Маса");
		wheightLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		wheightFire = TextReader.getData("Local/wheight2.txt");
		wheightCombo = new JComboBox<Object>(wheightFire);
		wheightCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel catLabel = new JLabel("Категория");
		catLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		catCombo = new JComboBox<Object>(new Object[] { "", "1", "2", "3", "4",
				"5" });
		catCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel brandLabel = new JLabel("Марка");
		brandLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		brandFire = TextReader.getData("Local/brand2.txt");
		brandCombo = new JComboBox<Object>(brandFire);
		brandCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel doingLabel = new JLabel("Вид обслужване");
		doingLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		doingCombo = new JComboBox<Object>(new Object[] { "", "ТО", "П", "ХИ",
				"ТО,П", "ТО,П,ХИ" });
		doingCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		searchButton = new JButton();
		searchButton.setText("Търсене");
		searchButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if (destination == null) {
					JOptionPane.showMessageDialog(null,
							"Не е посочено търсене!");
					return;
				}

				SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {

					@Override
					protected Void doInBackground() throws Exception {
						// TODO Auto-generated method stub
						JDialog jDialog = ((JDialog) (SwingUtilities
								.getWindowAncestor(ReportDialog.this)));
						jDialog.setCursor(new Cursor(Cursor.WAIT_CURSOR));

						ArrayList<Object[]> data = null;

						if (destination.equals(SERVICE)
								|| destination.equals(PROTOKOL)
								|| destination.equals(BRACK)) {
							try {

								data = ReportRequest
										.getReports(buildCommandForSO_Table_Protokol_Brack(destination));
							} finally {
								switch (destination) {
								case SERVICE:
									title = SO_Title;
									break;
								case PROTOKOL:
									title = Protokol_Title;
									break;
								case BRACK:
									title = Brack_Title;
									break;
								default:
									break;
								}
								SwingUtilities.invokeLater(new EDTSO_Pr_Br(
										data, jDialog, No, "Справки " + title,
										destination));
								No = ""; // clear current number

							}
						} else if (destination.equals(INVOICE_PARENT)
								|| destination.equals(PROFORM_PARENT)) {
							try {

								// get info for parent
								switch (destination) {
								case INVOICE_PARENT:
									invoiceTitle = "Фактура";
									d = Common
											.getInfoForParentAndChildTable(buildCommandForInvoice());
									break;
								case PROFORM_PARENT:
									invoiceTitle = "Проформа";
									d = Common
											.getInfoForParentAndChildTable(buildCommandForProform());
									break;
								default:
									break;
								}
							} finally {

								SwingUtilities
										.invokeLater(new EDTInvoice(d, jDialog,
												No, "Справки " + invoiceTitle));
								No = "";

							}

						} else if (destination.equals(ACQUITTANCE_PARENT)) {

							try {
								d = Common
										.getInfoForParentAndChildTable(buildCommandForAcquittance());

							} finally {
								EDTAcquitance edt = new EDTAcquitance(d,
										jDialog, "Справки Стокова Разписка");
								SwingUtilities.invokeLater(edt);

							}
						} else if (destination.equals(AVAILABLE_ARTIKULS)) {
							String command = buildSearchCommandForArtikuls();
							ArrayList<Object[]> dataa = ReportRequest
									.getReports(command);
							// ???? sort artikuls
							Collections.sort(dataa, new Comparator<Object[]>() {
								@Override
								public int compare(Object[] fruit2,
										Object[] fruit1) {

									return fruit2[0]
											.toString()
											.toLowerCase()
											.compareTo(
													fruit1[0].toString()
															.toLowerCase());
								}
							});

							EDTArtikuls edt = new EDTArtikuls(dataa, jDialog,
									"Артикули");
							SwingUtilities.invokeLater(edt);
						} else if (destination.equals(NEW_EXTINGUISHERS)) {
							ArrayList<Object[]> newExtinguishers = NewExtinguishers_DB
									.getNewExtinguishers(buildCommandForNewExtinguishers());
							// sorting by date
							Collections.sort(newExtinguishers,
									new Comparator<Object[]>() {
										@Override
										public int compare(Object[] arr,
												Object[] arr1) {
											// compare by date of sales
											String a = arr[8].toString();
											String b = arr1[8].toString();
											int compare = compareStringsInReverseOrder(
													a, b);
											return compare;
										}
									});
							EDTNewExtinguishers edt = new EDTNewExtinguishers(
									newExtinguishers, jDialog,
									"Нови пожарогасители");
							SwingUtilities.invokeLater(edt);
						} else if (destination.equals(DELIVERY_ARTIKULS)) {
							ArrayList<Object[]> getDelivery = ReportRequest
									.getReports((buildCommandForDeliveryArtikuls()));
							// sorting by date
							Collections.sort(getDelivery,
									new Comparator<Object[]>() {
										@Override
										public int compare(Object[] arr,
												Object[] arr1) {
											// compare by date of sales
											String aDate = arr[6].toString();
											String bDate = arr1[6].toString();
											int compare = compareStringsInReverseOrder(
													aDate, bDate);
											if (compare != 0) {
												return compare;
											} else {
												String aInvoice = arr[4]
														.toString();
												String bInvoice = arr1[4]
														.toString();
												return aInvoice
														.compareTo(bInvoice);
											}

										}
									});
							;
							EDTDelivery edt = new EDTDelivery(getDelivery,
									jDialog, "Справка Доставки "
											+ fromDate.getText() + " - "
											+ toDate.getText());
							SwingUtilities.invokeLater(edt);

						} else if (destination.equals(SELLS)) {
							// COMMENT FOR NOW MUST BE OPTIMIZED !!!
							String from = fromDate.getText();
							String to = toDate.getText();
							ArrayList<Object[]> getDelivery = ReportRequest
									.getReports(buildCommandForSales2FromTo(
											"01.06.2016", to));
							ArrayList<Object[]> getInvoice = ReportRequest
									.getReports(buildCommandForSalesFromTo(
											from, to));

							EDTSales edt = new EDTSales(getInvoice,
									getDelivery, jDialog, "Справка Продажби "
											+ fromDate.getText() + " - "
											+ toDate.getText());
							SwingUtilities.invokeLater(edt);
						} else if (destination.equals(AVAILABILITY)) {

							if (fromDate.getText().isEmpty()
									|| toDate.getText().isEmpty()) {
								JOptionPane.showMessageDialog(null,
										"Не е избрана дата");
								return null;
							}
							String from = fromDate.getText();
							String to = toDate.getText();
							String from2 = GetDate.getDateBeforeAnotherDate(1,
									GetDate.getDateFromString(fromDate
											.getText()));

							// System.out.printf("%s %s\n", from, to);
							// System.out.printf("%s %s\n", from2, to);
							ArrayList<Object[]> deliveryBeforeDate = ReportRequest
									.getReports(buildCommandForDeliveryFromTo(
											"01.06.2016", from2));
							ArrayList<Object[]> invoiceBeforeDate = ReportRequest
									.getReports(buildCommandForInvoiceFromTo(
											"01.06.2016", from2));

							ArrayList<Object[]> deliveryToDate = ReportRequest
									.getReports(buildCommandForDeliveryFromTo(
											from, to));
							ArrayList<Object[]> invoiceToDate = ReportRequest
									.getReports(buildCommandForInvoiceFromTo(
											from, to));
							EDTAvailability edt = new EDTAvailability(
									deliveryBeforeDate, invoiceBeforeDate,
									deliveryToDate, invoiceToDate, from, to,
									jDialog, "Справка Наличност " + from2
											+ " - " + to);
							SwingUtilities.invokeLater(edt);
						}

						return null;
					}

				};
				sw.execute();
			}

		});

		searchButton.setPreferredSize(new Dimension(200, 30));

		eastPanel.add(menuBar);

		JLabel emptyLabel = new JLabel(" Клиенти ");
		emptyLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		eastPanel.add(clientCombo);
		eastPanel.add(fromDate);
		eastPanel.add(toDate);
		eastPanel.add(so_field);
		eastPanel.add(prot_field);
		eastPanel.add(fact_field);
		eastPanel.add(acquittanceField);
		eastPanel.add(serial);
		eastPanel.add(barcod);
		eastPanel.add(artikulsComboBox);// (artikuliField);
		eastPanel.add(newExtinguishersComboBox);

		westPanel.add(typeLabel);
		westPanel.add(typeCombo);
		westPanel.add(wheightLabel);
		westPanel.add(wheightCombo);
		westPanel.add(catLabel);
		westPanel.add(catCombo);
		westPanel.add(brandLabel);
		westPanel.add(brandCombo);
		// test
		westPanel.add(doingLabel);
		westPanel.add(doingCombo);

		// westPanel.add(new JLabel());
		westPanel.add(searchButton);

		basePanel.add(eastPanel);
		basePanel.add(westPanel);

		moreWidthPanel = new JPanel();// GradientPanel();

		moreWidthPanel.add(basePanel);
		moreWidthPanel.setBorder(BorderFactory.createLineBorder(Color.black));

		setComponentState(false, false, false, false, false, false, false,
				false, false, false, false, false, false);
		this.add(moreWidthPanel);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				ReportDialog r = new ReportDialog();
				JustFrame f = new JustFrame(r);
				f.setTitle("Справки");
				f.pack();
			}

		});
	}

	private String buildCommandForSO_Table_Protokol_Brack(String dest) {

		StringBuilder mainCommand1 = new StringBuilder();
		int selectedCriterii = 0;
		String selectWhat = "";
		switch (dest) {
		case SERVICE:
			selectWhat = "select client, type, wheight, barcod, serial, category, brand, "
					+ "T_O, P, HI, done, number, person, date , additional_data from ";
			break;
		case PROTOKOL:
			selectWhat = "select client, type, wheight, barcod, serial, category, brand,"
					+ " T_O, P, HI, parts, value, number, person, date , kontragent, invoiceByKontragent, additional_data from ";
			break;
		case BRACK:
			selectWhat = "select * from ";
			break;
		default:
			break;
		}

		mainCommand1.append(selectWhat + dest); // "select * from "

		if (!clientCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("client like " + "'"
					+ clientCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}

		if (!so_field.getText().isEmpty() && dest.equals(SERVICE)) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			// this works !!! mainCommand1.append("substr(barcod,1,10) like " +
			// "'"
			// + so_field.getText() + "'");
			mainCommand1.append("number = " + "'" + so_field.getText() + "'");
			No = so_field.getText();
			selectedCriterii++;
		}
		if (!prot_field.getText().isEmpty()
				&& (dest.equals(PROTOKOL) || dest.equals(BRACK))) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			// if (dest.equals(PROTOKOL)) {
			mainCommand1.append("number like " + "'" + prot_field.getText()
					+ "'");
			// }
			No = prot_field.getText();
			selectedCriterii++;
		}

		if (!typeCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("type like " + "'"
					+ typeCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!wheightCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("wheight like " + "'"
					+ wheightCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!catCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("category like " + "'"
					+ catCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!brandCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("brand like " + "'"
					+ brandCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}

		if (doingCombo.isEnabled() && !doingCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			String selectedItem = doingCombo.getSelectedItem().toString();

			if (selectedItem.equals("ТО")) {
				mainCommand1
						.append("T_O not like 'не' and P like 'не' and HI like 'не'");
			} else if (selectedItem.equals("П")) {
				mainCommand1
						.append("P not like 'не' and T_O like 'не' and HI like 'не'");
			} else if (selectedItem.equals("ХИ")) {
				mainCommand1
						.append("HI not like 'не' and T_O like 'не' and P like 'не'");
			} else if (selectedItem.equals("ТО,П")) {
				mainCommand1
						.append("T_O not like 'не' and P not like 'не' and HI like 'не'");
			} else if (selectedItem.equals("ТО,П,ХИ")) {
				mainCommand1
						.append("T_O not like 'не' and P not like 'не' and HI not like 'не'");
			}

			selectedCriterii++;
		} else {
			// do nothing
		}
		if (!serial.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("serial like " + "'" + serial.getText() + "'");
			selectedCriterii++;
			No = serial.getText();
		} else if (!barcod.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("barcod like " + "'" + barcod.getText() + "'");
			selectedCriterii++;
			No = barcod.getText();
		}

		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("date between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			selectedCriterii++;
		}

		// if (destination.equals(SERVICE) || destination.equals(PROTOKOL)) {
		// if (flag) {
		// mainCommand1.append(" and ");
		// } else {
		// mainCommand1.append(" where ");
		// }
		// mainCommand1.append("uptodate like 'not null'");
		// }

		// add sorting
		mainCommand1.append(" order by number");

		return mainCommand1.toString();
	}

	//
	private String buildCommandForAcquittance() {
		StringBuilder sb = new StringBuilder();
		sb.append("select * from " + ACQUITTANCE_PARENT + ","
				+ ACQUITTANCE_CHILD
				+ " where AcquittanceParentDB.id = AcquittanceChildDB.id");

		if (!clientCombo.getSelectedItem().equals("")) {
			sb.append(" and AcquittanceParentDB.client = '"
					+ clientCombo.getSelectedItem() + "'");
		}
		if (!fact_field.getText().isEmpty()) {
			sb.append(" and AcquittanceParentDB.id = " + "'"
					+ fact_field.getText() + "'");
		}
		// add date
		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			sb.append(" and AcquittanceParentDB.date between " + "Date('"
					+ fromDate.getText() + "')" + " and " + "Date('"
					+ toDate.getText() + "')");
		}
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			sb.append(" and AcquittanceChildDB.artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		sb.append(" order by AcquittanceParentDB.id");
		return sb.toString();
	}

	private String buildCommandForProform() {
		StringBuilder sb = new StringBuilder();
		sb.append("select * from " + PROFORM_PARENT + "," + PROFORM_CHILD
				+ " where ProformParentDB.id = ProformChildDB2.id");

		if (!clientCombo.getSelectedItem().equals("")) {
			sb.append(" and ProformParentDB.client like '"
					+ clientCombo.getSelectedItem() + "'");
		}
		if (!fact_field.getText().isEmpty()) {
			sb.append(" and ProformParentDB.id = " + "'" + fact_field.getText()
					+ "'");
		}
		// add date
		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			sb.append(" and ProformParentDB.date between " + "Date('"
					+ fromDate.getText() + "')" + " and " + "Date('"
					+ toDate.getText() + "')");
		}
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			sb.append(" and ProformChildDB2.make like " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		sb.append(" order by ProformParentDB.id");
		return sb.toString();
	}

	private String buildCommandForInvoice() {
		StringBuilder sb = new StringBuilder();
		sb.append("select * from " + INVOICE_PARENT + "," + INVOICE_CHILD
				+ " where InvoiceParentDB5.id = InvoiceChildDB7.id");

		if (!clientCombo.getSelectedItem().equals("")) {
			sb.append(" and InvoiceParentDB5.client like '"
					+ clientCombo.getSelectedItem() + "'");
		}
		if (!fact_field.getText().isEmpty()) {
			sb.append(" and InvoiceParentDB5.id = " + "'"
					+ fact_field.getText() + "'");
		}
		// add date
		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			sb.append(" and InvoiceParentDB5.date between " + "Date('"
					+ fromDate.getText() + "')" + " and " + "Date('"
					+ toDate.getText() + "')");
		}
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			sb.append(" and InvoiceChildDB7.artikul like " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		sb.append(" order by InvoiceParentDB5.id");
		return sb.toString();
	}

	private String buildSearchCommandForArtikuls() {
		StringBuilder mainCommand1 = new StringBuilder();

		int selectedCriterii = 0;

		mainCommand1.append("select * from " + AVAILABLE_ARTIKULS);

		if (!clientCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("client like " + "'"
					+ clientCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!fact_field.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where invoice = " + "'"
						+ fact_field.getText() + "'");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and invoice = " + "'"
						+ fact_field.getText() + "'");
			}
			selectedCriterii++;
		}
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("artikul like " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
			selectedCriterii++;
		}

		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("date between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			selectedCriterii++;
		}
		// mainCommand1.append(" order by artikul");
		return mainCommand1.toString();
	}

	private String buildCommandForNewExtinguishers() {
		StringBuilder mainCommand1 = new StringBuilder();

		int selectedCriterii = 0;

		mainCommand1.append("select * from " + NEW_EXTINGUISHERS);

		if (!clientCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("client like " + "'"
					+ clientCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!fact_field.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where invoice = " + "'"
						+ fact_field.getText() + "'");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and invoice = " + "'"
						+ fact_field.getText() + "'");
			}
			selectedCriterii++;
		}
		if (!newExtinguishersComboBox.getSelectedItem().toString().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("type like " + "'"
					+ newExtinguishersComboBox.getSelectedItem().toString()
					+ "'");
			selectedCriterii++;
		}

		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("date between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			selectedCriterii++;
		}
		// mainCommand1.append(" order by invoice");
		return mainCommand1.toString();
	}

	private String buildCommandForDeliveryArtikuls() {
		StringBuilder mainCommand1 = new StringBuilder();

		int selectedCriterii = 0;

		mainCommand1.append("select * from " + DELIVERY_ARTIKULS);

		if (!clientCombo.getSelectedItem().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("kontragent = " + "'"
					+ clientCombo.getSelectedItem() + "'");
			selectedCriterii++;
		}
		if (!fact_field.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where invoiceByKontragent = " + "'"
						+ fact_field.getText() + "'");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and invoiceByKontragent = " + "'"
						+ fact_field.getText() + "'");
			}
			selectedCriterii++;
		}
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
			selectedCriterii++;
		}
		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (selectedCriterii == 0) {
				mainCommand1.append(" where ");
			} else if (selectedCriterii > 0) {
				mainCommand1.append(" and ");
			}
			mainCommand1.append("date between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			selectedCriterii++;
		}

		return mainCommand1.toString();
	}

	// private String buildCommandForSales() {
	// StringBuilder mainCommand1 = new StringBuilder();
	// int selectedCriterii = 0;
	// mainCommand1
	// .append("select InvoiceParentDB5.id, InvoiceParentDB5.date, InvoiceParentDB5.client,"
	// +
	// " InvoiceChildDB7.artikul, InvoiceChildDB7.med, InvoiceChildDB7.quantity,"
	// + " InvoiceChildDB7.price,  DeliveryArtikulsDB2.value from "
	// + MainPanel.INVOICE_PARENT
	// + ","
	// + MainPanel.INVOICE_CHILD
	// + ","
	// + MainPanel.DELIVERY_ARTIKULS);
	//
	// if (!clientCombo.getSelectedItem().equals("")) {
	// if (selectedCriterii == 0) {
	// mainCommand1.append(" where ");
	// } else {
	// mainCommand1.append(" and ");
	// }
	// mainCommand1.append("InvoiceParentDB5.client = " + "'"
	// + clientCombo.getSelectedItem() + "'");
	// selectedCriterii++;
	// }
	// if (!fact_field.getText().isEmpty()) {
	// if (selectedCriterii == 0) {
	// mainCommand1.append(" where ");
	// } else {
	// mainCommand1.append(" and ");
	// }
	// mainCommand1.append("InvoiceParentDB5.id = " + "'"
	// + fact_field.getText() + "'");
	// selectedCriterii++;
	// }
	// if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
	// if (selectedCriterii == 0) {
	// mainCommand1.append(" where ");
	// } else {
	// mainCommand1.append(" and ");
	// }
	// mainCommand1.append("InvoiceChildDB7.artikul = " + "'"
	// + artikulsComboBox.getSelectedItem().toString() + "'");
	// selectedCriterii++;
	// }
	// if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
	// if (selectedCriterii == 0) {
	// mainCommand1.append(" where ");
	// } else {
	// mainCommand1.append(" and ");
	// }
	// mainCommand1.append("InvoiceParentDB5.date between " + "Date('"
	// + fromDate.getText() + "')" + " and " + "Date('"
	// + toDate.getText() + "')");
	// selectedCriterii++;
	// }
	// if (selectedCriterii == 0) {
	// mainCommand1.append(" where ");
	// } else {
	// mainCommand1.append(" and ");
	// }
	// mainCommand1
	// .append("InvoiceParentDB5.id = InvoiceChildDB7.id"
	// + " and (InvoiceChildDB7.invoiceByKontragent"
	// + " = DeliveryArtikulsDB2.invoiceByKontragent"
	// + " and InvoiceChildDB7.kontragent = DeliveryArtikulsDB2.kontragent)"
	// + " and InvoiceChildDB7.artikul = DeliveryArtikulsDB2.artikul");
	//
	// return mainCommand1.toString();
	// }
	private String buildCommandForSales2FromTo(String from, String to) {
		StringBuilder mainCommand1 = new StringBuilder();
		mainCommand1
				.append("select DeliveryArtikulsDB2.invoiceByKontragent, DeliveryArtikulsDB2.kontragent,"
						+ " DeliveryArtikulsDB2.date, DeliveryArtikulsDB2.artikul, DeliveryArtikulsDB2.value from "
						+ DELIVERY_ARTIKULS
						+ " where DeliveryArtikulsDB2.date between "
						+ "Date('"
						+ from + "')" + " and " + "Date('" + to + "')");
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			mainCommand1.append(" and DeliveryArtikulsDB2.artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		return mainCommand1.toString();
	}

	private String buildCommandForSalesFromTo(String from, String to) {
		StringBuilder sb = new StringBuilder();
		sb.append("select InvoiceChildDB7.id, InvoiceChildDB7.client, InvoiceChildDB7.invoiceByKontragent, InvoiceChildDB7.kontragent,"
				+ " InvoiceChildDB7.artikul, InvoiceChildDB7.med, InvoiceChildDB7.quantity,"
				+ " InvoiceChildDB7.price, InvoiceParentDB5.date from "
				+ INVOICE_CHILD
				+ ","
				+ INVOICE_PARENT
				+ " where InvoiceParentDB5.id = InvoiceChildDB7.id"
				+ " and InvoiceParentDB5.date between "
				+ "Date('"
				+ from
				+ "')" + " and " + "Date('" + to + "')");
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			sb.append(" and  InvoiceChildDB7.artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		return sb.toString();
	}

	private String buildCommandForDeliveryFromTo(String from, String to) {
		StringBuilder mainCommand1 = new StringBuilder();
		mainCommand1
				.append("select DeliveryArtikulsDB2.artikul, DeliveryArtikulsDB2.quantity, DeliveryArtikulsDB2.value, DeliveryArtikulsDB2.date from "
						+ DELIVERY_ARTIKULS
						+ " where DeliveryArtikulsDB2.date between "
						+ "Date('"
						+ from + "')" + " and " + "Date('" + to + "')");
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			mainCommand1.append(" and DeliveryArtikulsDB2.artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		return mainCommand1.toString();
	}

	private String buildCommandForInvoiceFromTo(String from, String to) {
		StringBuilder sb = new StringBuilder();
		sb.append("select InvoiceChildDB7.artikul, InvoiceChildDB7.quantity,"
				+ " InvoiceChildDB7.price, InvoiceParentDB5.date from "
				+ INVOICE_CHILD + "," + INVOICE_PARENT
				+ " where InvoiceParentDB5.id = InvoiceChildDB7.id"
				+ " and InvoiceParentDB5.date between " + "Date('" + from
				+ "')" + " and " + "Date('" + to + "')");
		if (!artikulsComboBox.getSelectedItem().toString().equals("")) {
			sb.append(" and  InvoiceChildDB7.artikul = " + "'"
					+ artikulsComboBox.getSelectedItem().toString() + "'");
		}
		return sb.toString();
	}

	private void setComponentState(boolean so, boolean prot, boolean fact,
			boolean acq, boolean ser, boolean bar, boolean artikul,
			boolean newExtinguisher, boolean type, boolean whei, boolean cat,
			boolean brand, boolean doing) {
		so_field.setEditable(so);
		prot_field.setEditable(prot);
		fact_field.setEditable(fact);
		acquittanceField.setEditable(acq);
		serial.setEditable(ser);
		barcod.setEditable(bar);
		artikulsComboBox.setEnabled(artikul);
		newExtinguishersComboBox.setEnabled(newExtinguisher);
		typeCombo.setEnabled(type);
		wheightCombo.setEnabled(whei);
		catCombo.setEnabled(cat);
		brandCombo.setEnabled(brand);
		doingCombo.setEnabled(doing);

	}

}
