package db.Artikul;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import utility.MainPanel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import net.getCurrentIP;
import Date.GetDate;
import Exceptions.DBException;
import db.MainTable;

public class Artikuli_DB extends MainPanel {

	private void createArtikul_DB() {
		Connection connect = null;
		Statement stat = null;
		String command = "create table " + ARTIKULS + " (artikul varchar(100),quantity int,"
				+ "med varchar(20),value varchar(20))"; // artikuli->300
		// да се добавят колони фактура, контрагент, дата, оператор, процент печалба, ?
		// =>, invoice, client, date, operator, percentProfit, ?
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			stat.execute(command);
			System.out.println("table created succesfully!");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
		} finally {
			try {
				if(stat != null) {
				stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	private int modifyColumnWidth(String column,int width) {
		Connection connect = null;
		Statement stat = null;
		String modifyString = 
				String.format("alter table %s alter column %s set data type varchar(%d)"
		, ARTIKULS, column, width);
		// origin	"alter table " + ARTIKULS + " alter column artikul set data type varchar(" + width +  ")";
		int modify = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			modify = stat.executeUpdate(modifyString);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
		} finally {
			
				try {
					if(stat != null) {
					stat.close();
					}
					if(connect != null) {
						connect.close();
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		return modify;
	}
	public static int initArtikulTable(String table, String artikul,int quantity,String med,String value) {
		Connection connect = null;
		Statement stat = null;
		String command = "insert into " + table + " values ('" + artikul + "'," + quantity + ",'" 
				+ med + "','" + value + "')";
		int insert = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			stat.executeUpdate(command);
			insert = stat.getUpdateCount();
			return insert;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return insert;
		} finally {
			try {
				if(stat != null) {
				stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return insert;
			}
		}
	}
	
	public static ArrayList<String> getArtikulsName() {
		Connection connect = null;
		Statement stat = null;
		String command = "select artikul from " + ARTIKULS + " order by artikul";
		ResultSet rs = null;
		ResultSetMetaData rsmd = null;
		ArrayList<String> result = new ArrayList<String>();
		ArrayList<String> obj = null;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			rs = stat.executeQuery(command);
			while(rs.next()) {
			//	rsmd = rs.getMetaData();
			//	obj = new ArrayList<String>();
				//for(int col = 0;col < rsmd.getColumnCount();col++) {
					result.add(rs.getString(1));
				//}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return null;
		} finally {
			try {
				if(rs != null) {
				rs.close();
				}
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return null;
			}
		}
		return result;
	}
	public static ArrayList<Object[]> getArtikuls() {
		Connection connect = null;
		Statement stat = null;
		String command = "select * from " + ARTIKULS + " order by artikul";
		ResultSet rs = null;
		ResultSetMetaData rsmd = null;
		ArrayList<Object[]> result = new ArrayList<Object[]>();
		ArrayList<String> obj = null;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			rs = stat.executeQuery(command);
			while(rs.next()) {
				rsmd = rs.getMetaData();
				obj = new ArrayList<String>();
				for(int col = 0;col < rsmd.getColumnCount();col++) {
				//	System.out.print(rs.getString(col+1)+" ");
					obj.add(rs.getString(col+1));
				}
			//	System.out.println();
				result.add(obj.toArray());
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return null;
		} finally {
			try {
				if(rs != null) {
				rs.close();
				}
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return null;
			}
		}
		return result;
	}
	public static ArrayList<Object[]> getAvailableArtikuls(String client, String artikul) {
		Connection connect = null;
		Statement stat = null;
		String command = "select artikul, quantity from " + ARTIKULS + " where client like " 
			+ "'" + client + "'" + " and artikul like " + 
				"'" + artikul + "'" +  " and quantity > 0 order by date";
		ResultSet rs = null;
		ResultSetMetaData rsmd = null;
		ArrayList<Object[]> result = new ArrayList<Object[]>();
		ArrayList<String> obj = null;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			rs = stat.executeQuery(command);
			while(rs.next()) {
				rsmd = rs.getMetaData();
				obj = new ArrayList<String>();
				for(int col = 0;col < rsmd.getColumnCount();col++) {
				//	System.out.printf("%s ",rs.getString(col+1));
					obj.add(rs.getString(col+1));
				}
			//	System.out.printf("\n");
				result.add(obj.toArray());
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return null;
		} finally {
			try {
				if(rs != null) {
				rs.close();
				}
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return null;
			}
		}
		return result;
	}
	public static int deleteArtikuls(String artikul, String invoice) {
		Connection connect = null;
	//	Statement stat = null;
		PreparedStatement ps = null;
		String command = "delete from " + ARTIKULS + " where artikul = ? and invoice = ?";
	//	String command2 = "delete from " + ARTIKULS + " where artikul like '" + artikul + "'";
		int delete = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			ps =  connect.prepareStatement(command);//stat =  connect.createStatement();
			ps.setString(1, artikul);
			ps.setString(2, invoice);
		//	stat.executeUpdate(command);
			delete =  ps.executeUpdate();//  stat.getUpdateCount();
			return delete;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return delete;
		}  finally {
			try {
				if(ps != null) {
				ps.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return delete;
			}
		}
	
	}
	
	public static int editArtikulQuantity(String artikul, String newQuantity) {
		Connection connect = null;
	//	Statement stat = null;
		PreparedStatement ps = null;
	/*	String command = "update " + ARTIKULS + " set quantity = "+ newQuantity +
				  " where artikul like '" + artikul + "'";*/
		String command = "update " + ARTIKULS + " set quantity = ? where artikul like ?";
		int update = 0;
		
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			ps = connect.prepareStatement(command);
			ps.setString(1, newQuantity);
			ps.setString(2, artikul);
			update = ps.executeUpdate();
			//stat = connect.createStatement();
			//update = stat.executeUpdate(command);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
		} finally {
			try {
				if(ps != null) {
				ps.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return update;
	}
	
	
	
	public static int increaseArtikulQuantity(String artikul, int quantity) {
		Connection connect = null;
		Statement stat = null;
		String command = "update " + ARTIKULS + " set quantity = " + "(quantity + "+ quantity + ")" + 
				  " where artikul like '" + artikul + "'";
		
		int update = 0;
		
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			update = stat.executeUpdate(command);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
		} finally {
			try {
				if(stat != null) {
				stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return update;
	}
	
	public static int insertArtikul(String artikul,int quantity,String med,String value,
			String invoiceNumber,
			   String client,String date,  String seller, String percentProfit) {
		Connection connect = null;
		Statement stat = null;
		String command = "insert into " + ARTIKULS + " values ('" + artikul + "'," + quantity + ",'" 
				+ med + "','" + value +  "','" + invoiceNumber + "','" + client  + "','" + date
				+ "','" + seller + "','" + percentProfit + "')";
		int insert = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			insert = stat.executeUpdate(command);
		    return insert;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return insert;
		}  finally {
			try {
				if(stat != null) {
				stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return insert;
			}
		}
	}
	public static String getArtikulPrice(String artikul) {
		Connection connect = null;
		Statement stat = null;
		ResultSet rs = null;
		String value = "";
		String command = "select value from " + ARTIKULS + " where artikul like '" + artikul + "'";
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			rs = stat.executeQuery(command);
			while(rs.next()) {
				value = rs.getString(1);
				break;
			}
			return value;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return null;
		} finally {
			try {
				if(rs != null) {
 				rs.close();
				}
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return null;
			}
		}
	}
	// this method update artikuls quantity
	public static int decreaseArtikul_Quantity(String artikul,int i) {
		Connection connect = null;
		Statement stat = null;
		PreparedStatement ps = null;
	/*	String command2 = "update " + ARTIKULS + " set quantity = quantity - " + i + 
				  " where artikul like '" + artikul + "'";*/
		String command = "update " + ARTIKULS + " set quantity = quantity - ? where artikul like ?";
		int update = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			ps = connect.prepareStatement(command);
			ps.setString(1, i+"");
			ps.setString(2, artikul);
			update = ps.executeUpdate();
		//	stat = connect.createStatement();
		//	update = stat.executeUpdate(command);
			return update;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return update;
		} finally {
			try {
				if(ps != null) {
					ps.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return update;
			}
		}
	}
	public static int updateArtikul_Value(String artikul,String value) {

		
		Connection connect = null;
		Statement stat = null;
		String command = "update " + ARTIKULS + " set value = '" + value + 
				"'" + " where artikul like '" + artikul + "'";
		int update = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			update = stat.executeUpdate(command);
			return update;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return update;
		} finally {
			try {
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return update;
			}
		}
	}

	private int updateAnyColumnValue(String column, String value) {
		Connection connect = null;
		Statement stat = null;
		String command = String.format("update %s set %s = '%s'",
				MainPanel.ARTIKULS ,  column, value);
		int update = 0;
		try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			update = stat.executeUpdate(command);
			return update;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			DBException.DBExceptions("Грешка", e);
			Log.DB_Err.writeErros(e.toString());
			e.printStackTrace();
			return update;
		} finally {
			try {
				if(stat != null) {
					stat.close();
				}
				if(connect != null) {
					connect.close();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				DBException.DBExceptions("Грешка", e);
				Log.DB_Err.writeErros(e.toString());
				e.printStackTrace();
				return update;
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Artikuli_DB art = new Artikuli_DB();
    // to add in artikuls => invoice, client, date, operator, percentProfit, ?
  //  int update = art.modifyColumnWidth("operator", 30);
    int update = art.updateAnyColumnValue("percentProfit", "0");
    System.out.println("update = " + update);
  /*  ArrayList<Object[]> artikuls = getArtikuls();
    for(int i = 0;i < artikuls.size();i++) {
    	int q = 0;
    	try {
    	q = Integer.parseInt(artikuls.get(i)[1].toString());
    	} catch (Exception e) {
    		System.out.println("at row " + i);
    	}
    	
//    	  System.out.printf("%s %d %s %s\n",artikuls.get(i)[0].toString(), q, 
//    			  artikuls.get(i)[2].toString(),  artikuls.get(i)[3].toString());
//    	  
          initArtikulTable("ArtikulsDB_LPS",artikuls.get(i)[0].toString(), q, 
		    artikuls.get(i)[2].toString(),  artikuls.get(i)[3].toString());
    }*/
   // art.createArtikul_DB();
  //  int modify = art.modifyColumnWidth(300);
  //  System.out.println(modify);
  /*//  art.createArtikul_DB();
   Object[][] obj = readExcel("sklad3.xls");
    for(int i = 1;i < obj.length;i++) {
    	if(obj[i][0].equals("")) {
    		continue;
    	}
    	int q = 0;
    	try {
    	q = Integer.parseInt(obj[i][1].toString());
    	} catch (Exception e) {
    		System.out.println("at row " + i);
    	}
          insertArtikul(obj[i][0].toString(), q, 
		   q == 1  ? "брой" : "броя", obj[i][2].toString());
  //  	System.out.printf("%s %s %s\n", obj[i][0],obj[i][1],obj[i][2]);
    }
 //   System.out.println((char)'\u044f');  // u0431 u0440 u043 u04f
  * 
*/
   /* try {
    	ArrayList<Object[]> data = art.copyData(MainTable.SERVICE);
		art.writeInExcel(data,"Сервизни Поръчки.xls");
	} catch (RowsExceededException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (WriteException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}*/
    
	}
	
	   public static Object[][] readExcel(String fileName) {
			Object[][] obj = null;
			try {
			
				File f = new File(fileName);
				Workbook workBook = Workbook.getWorkbook(f.getAbsoluteFile());
				Sheet sheet = workBook.getSheet(0);
			     obj = new Object[sheet.getRows()][sheet.getColumns()];
			     for(int column = 0;column < sheet.getColumns();column++) {
			 
			    	 for(int row = 0;row < sheet.getRows();row++) {
			    		 Cell cell = sheet.getCell(column,row);
		                  obj[row][column] = cell.getContents();
			    		}
			  
			     }
			} catch (BiffException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return obj;
		}
	   private void writeInExcel(ArrayList<Object[]> data, String output) 
			  throws IOException, 
			   RowsExceededException, 
			  WriteException {
		     WritableWorkbook wworkbook;
		      wworkbook = Workbook.createWorkbook(new File(output));
		      WritableSheet wsheet = wworkbook.createSheet("First Sheet", 0);
		      for(int i = 0;i < data.size();i++) {
		    	  Object[] obj = data.get(i);
		    	  for(int j = 0;j < obj.length;j++) {
		      Label label = new Label(j,i, obj[j].toString());
		      wsheet.addCell(label);
		    	  }
		      }
		   /*   Number number = new Number(3, 4, 3.1459);
		      wsheet.addCell( number);*/
		      wworkbook.write();
		      wworkbook.close();

	   }
	   private ArrayList<Object[]> copyData(String dbTable) {
		   Connection connect = null;
		   Statement stat = null;
		   String query = "select * from " + dbTable; 
		   ResultSet rs = null;
		   ResultSetMetaData rsmd = null;
		   ArrayList<Object[]> allData = new ArrayList<Object[]>();
		   ArrayList<Object> data = new ArrayList<Object>();
		   try {
			connect = DriverManager.getConnection(getCurrentIP.DB_PATH);
			stat = connect.createStatement();
			rs = stat.executeQuery(query);
			while(rs.next()) {
				rsmd = rs.getMetaData();
				data.clear();
				for(int i = 0;i < rsmd.getColumnCount();i++) {
					data.add(rs.getString(i+1));
				}
				allData.add(data.toArray());
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   return allData;
	   }
}
