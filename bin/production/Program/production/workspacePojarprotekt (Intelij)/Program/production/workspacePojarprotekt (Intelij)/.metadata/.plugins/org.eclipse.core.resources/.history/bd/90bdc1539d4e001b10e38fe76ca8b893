package Artikul;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import run.JDialoger;
import utility.EditableField;
import utility.MainPanel;
import utility.TooltipButton;
import Artikul.Renderers.ArtikulRenderer;
import Artikul.Workers.ChangeArtikulQuantityWorker;
import Artikul.Workers.ChangePriceOfArtikulWorker;
import Artikul.Workers.DeleteArtikulWorker;
import Artikul.Workers.LoadAllArtikulsWorker;

public class ArtikulsTable extends MainPanel  {

	private JPanel basePanel = null;
	private JPanel northPanel = null;
	private EditableField searchField = null;
	private TooltipButton loadButton = null;
//	private TooltipButton viewButton = null;
	private TooltipButton editPriceButton = null;
	private TooltipButton editQuantityButton = null;
	private TooltipButton deleteButton = null;
	private TooltipButton addArtikulButton = new TooltipButton();
	
	private JPanel centerPanel = null;
	public static JTable table = null;
	public static DefaultTableModel artikulTableModel = null;
	public static ArrayList<Object[]> helpSearchFieldList = new ArrayList<Object[]>();
	private JScrollPane scroll = null;
	
	public static int CURRENT_ROW = -1;
	
	
	public ArtikulsTable() {
		
		basePanel = new JPanel();
		basePanel.setLayout(new BorderLayout());
		basePanel.setBorder(BorderFactory.createLineBorder(Color.black));
		
		northPanel = new JPanel();//GradientPanel();
		northPanel.setLayout(new FlowLayout(FlowLayout.LEFT,20,5));
		northPanel.setPreferredSize(new Dimension(
				(int)(Toolkit.getDefaultToolkit().getScreenSize().width * 0.95),
				70));
		searchField = new EditableField("Търсене",10) {
			private static final long serialVersionUID = 2L;
			@Override
			public Font getFont() {
				return new Font(Font.MONOSPACED,Font.LAYOUT_NO_START_CONTEXT,
						MainPanel.getFontSize() + 10);
			}
		};
		searchField.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent ke) {
				artikulTableModel.setRowCount(0);
				CURRENT_ROW = -1;
				String b = searchField.getText().toLowerCase();
				// here may to optimize with binary search !!!
				// but work only for startsWith(string) no with contains(string)
			/*	if(b.length() > 0) {
					int left = 0;
					int right = helpSearchFieldList.size();
					int middle = (left + right) / 2;
				   
					while(left <= right) {
						Object[] obj = helpSearchFieldList.get(middle);
						String a = obj[0].toString().toLowerCase();
						if(a.startsWith(b)) {
							break;
						} else if(b.compareTo(a) < 0) {
							right = middle - 1;
						} else if(b.compareTo(a) > 0) {
							left = middle + 1;
						}
						middle = (left + right) / 2;
					}
				
					for(int m = left;m <= right;m++) {
						Object[] o = helpSearchFieldList.get(m);
						String c = o[0].toString().toLowerCase();
						if(c.startsWith(b)) {
							artikulTableModel.addRow(o);
						} 
					}
				
				}*/
				if(b.length() > 0) {
					for(int i = 0;i < helpSearchFieldList.size();i++) {
						Object[] obj = helpSearchFieldList.get(i);
						
						String a = obj[0].toString().toLowerCase();
						if(a.startsWith(b)) {
							artikulTableModel.addRow(obj);
						} else if(a.contains(b)) {
							artikulTableModel.addRow(obj);
						}
					}
				}
			}
		});
		loadButton = new TooltipButton();//("Опресни данните");
	    loadButton.setPreferredSize(new Dimension(
				(int)(searchField.getPreferredSize().getWidth() * 0.3),
				(int)(searchField.getPreferredSize().getHeight() * 0.85) ));;
		loadButton.setAutoSizedIcon(loadButton, setIcons(refreshImage));
		loadButton
		.setToolTipText(getHTML_Text("ЗАРЕДИ ДАНННИТЕ"));
		loadButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				/*if(artikulTableModel.getRowCount() == 0) 
					return;*/
				JDialog jd = ((JDialog)SwingUtilities.getWindowAncestor(ArtikulsTable.this));
				jd.setCursor(new Cursor(Cursor.WAIT_CURSOR));
				LoadAllArtikulsWorker load = new LoadAllArtikulsWorker(
						jd);
				load.execute();
			   
				
				
			}
			
		});
		
		/*viewButton = new TooltipButton("Виж текуща цена");
		
		viewButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if(artikulTableModel.getRowCount() == 0) 
					return;
				
				if(CURRENT_ROW == -1) {
					JOptionPane.showMessageDialog(null, "Не е избран пожарогасител !");
					return;
				}
				
				if(!table.getValueAt(CURRENT_ROW, 3).toString().isEmpty()) {
			
					return;
				}
				
				JDialog jd = (JDialog)SwingUtilities.getWindowAncestor(ArtikulsMainFrame.this);
				jd.setCursor(new Cursor(Cursor.WAIT_CURSOR));
				seeCurrentPriceOfArtikulWorker vw = 
						new seeCurrentPriceOfArtikulWorker(
								table.getValueAt(CURRENT_ROW, 0).toString(),
								jd);
				      try {
					String value = vw.doInBackground();
					
					if(value != null) {
			   		 table.setValueAt(value,CURRENT_ROW, 3);
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		});*/
		
		editPriceButton = new TooltipButton("Запази нова цена");
		editPriceButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if(artikulTableModel.getRowCount() == 0) 
					return;
				
				if(CURRENT_ROW == -1) {
					JOptionPane.showMessageDialog(null, "Не е избран пожарогасител !");
					return;
				}
				if(table.getValueAt(CURRENT_ROW, 3).toString().isEmpty()) {
					JOptionPane.showMessageDialog(null, "Не е въведена стойност!");
					return;
				}
				int yes_no = JOptionPane.showOptionDialog(null,
						"Желаете ли да съхраните въведените данни?", "",
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE, null, new String[] {
								"Да", "Не" }, // this is the array
						"default");
				if(yes_no == 0) {
					JDialog jd =    (JDialog)SwingUtilities.getWindowAncestor(ArtikulsTable.this);
                   jd.setCursor(new Cursor(Cursor.WAIT_CURSOR));
					
			   ChangePriceOfArtikulWorker ew = 
					   new ChangePriceOfArtikulWorker(
							jd);
			   ew.execute();
				}
				
			}
			
		});
		editQuantityButton = new TooltipButton("Добави к-во");
	    editQuantityButton.addActionListener(new ActionListener() {
	    	
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if(artikulTableModel.getRowCount() == 0) 
					return;
				
		        if(CURRENT_ROW == -1) {
					JOptionPane.showMessageDialog(null, "Не е избран артикул !");
					return;
				}
		        
			}
	    });		
		
		deleteButton = new TooltipButton("Изтрий артикул");
		
		deleteButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if(artikulTableModel.getRowCount() == 0) 
					return;
				
				if(CURRENT_ROW == -1) {
					JOptionPane.showMessageDialog(null, "Не е избран артикул !");
					return;
				}
			//	int[] selectedToDelete = table.getSelectedRows();
			    String item = table.getValueAt(CURRENT_ROW, 0).toString();
				int yes_no = JOptionPane.showOptionDialog(null,
						"Сигурни ли сте че искате да изтриете артикула ?", "",
						JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE, null, new String[] {
								"Да", "Не" }, // this is the array
						"default");
				if(yes_no == 0) {
			   DeleteArtikulWorker dw = new
					   DeleteArtikulWorker((JDialog)SwingUtilities.getWindowAncestor(
							   ArtikulsTable.this),
							   item);
			   dw.execute();
				}
			}
			
		});
		addArtikulButton = new TooltipButton("Добави нов артикул");
	
		addArtikulButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				
			
			//	int[] selectedToDelete = table.getSelectedRows();
				    String artikulItem = "";
				    String skladItem = "";
				    String medItem = "";
				    String valueItem = "";
				    String fakturaItem = "";
				    String kontragentItem = "";
				    String dateItem = "";
				    String operatorItem = "";	
				    String percentProfitItem = "";
				System.out.println("CURRENT_ROW = " + CURRENT_ROW);
				if(CURRENT_ROW >= 0) {
			    artikulItem = table.getValueAt(CURRENT_ROW, 0).toString();
			    skladItem = table.getValueAt(CURRENT_ROW, 1).toString();
			    medItem = table.getValueAt(CURRENT_ROW, 2).toString();
			    valueItem = table.getValueAt(CURRENT_ROW, 3).toString();
			    fakturaItem = table.getValueAt(CURRENT_ROW, 4).toString();
			    kontragentItem = table.getValueAt(CURRENT_ROW, 5).toString();
			    dateItem = table.getValueAt(CURRENT_ROW, 6).toString();
			    operatorItem = table.getValueAt(CURRENT_ROW, 7).toString();
			    percentProfitItem = table.getValueAt(CURRENT_ROW, 8).toString();
				}

				
				System.out.printf("%s %s %s %s %s %s %s %s %s\n",artikulItem,skladItem
							,medItem,valueItem, 
							fakturaItem, kontragentItem, dateItem,  operatorItem, percentProfitItem);
				AddArtikulDialog newArtikul =  new AddArtikulDialog(artikulItem, skladItem, medItem, valueItem,
						fakturaItem, kontragentItem , dateItem, operatorItem, percentProfitItem);
				JDialoger jd = new JDialoger();
				jd.setContentPane(newArtikul);
				jd.setResizable(false);
				jd.setTitle("Добави артикул");
				jd.Show();
		
			}
			
		});
		
		northPanel.add(searchField);
		northPanel.add(loadButton);
	//	northPanel.add(viewButton);
		northPanel.add(editQuantityButton);
	//	northPanel.add(editPriceButton);
		northPanel.add(deleteButton);
		northPanel.add(addArtikulButton);
		
		centerPanel = new JPanel();
		
		artikulTableModel = new DefaultTableModel(new String[]{"Артикули","Налични","Мерна Ед","Ед. Цена",
				"Фактура","Контрагент","Дата","Оператор","Процент Печалба"},0) {
			@Override
			public boolean isCellEditable(int row,int column) {
				if(column == 1 || column == 3) {
					return true;
				}
				return false;
			}
		};
		
		
		
		table = new JTable(artikulTableModel);

		// sorting data
		TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(table.getModel());
		table.setRowSorter(sorter);

		List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
		sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
		sorter.setSortKeys(sortKeys);
		// 
		
		
		table.setDefaultRenderer(Object.class, new ArtikulRenderer());
		table.setRowHeight(MainPanel.getFontSize() + 15);
		table.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent me) {
				CURRENT_ROW = table.getSelectedRow();
			}
		});
		//
		 setColumnsWidth();
		//
		//	JTable rowTable = new CommonResources.RowNumberTable(table); //****
		 
		 scroll = new JScrollPane(table,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
				JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
         scroll.setPreferredSize(new Dimension(
					northPanel.getPreferredSize().width,this.HEIGHT-150));
	//	   scroll.setRowHeaderView(rowTable);                  //****
	//	   scroll.setCorner(JScrollPane.UPPER_LEFT_CORNER,//****
	//       rowTable.getTableHeader());//****
		
		centerPanel.add(scroll);
		
		basePanel.add(northPanel,BorderLayout.NORTH);
		basePanel.add(centerPanel,BorderLayout.CENTER);
		this.add(basePanel);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
       SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				ArtikulsTable art = new ArtikulsTable();
				JFrame jf = new JFrame();
				jf.add(art);
				jf.pack();
				jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				jf.setVisible(true);
			}
        	
        });
		
	       
	       
	}
   private void setColumnsWidth() {
	   table.getColumnModel().getColumn(0).setPreferredWidth(this.WIDTH/3);
	   table.getColumnModel().getColumn(1).setPreferredWidth(this.WIDTH/20);
	   table.getColumnModel().getColumn(2).setPreferredWidth(this.WIDTH/20);
	   table.getColumnModel().getColumn(3).setPreferredWidth(this.WIDTH/20);
	   table.getColumnModel().getColumn(4).setPreferredWidth(this.WIDTH/10);
	   table.getColumnModel().getColumn(5).setPreferredWidth(this.WIDTH/10);
	   table.getColumnModel().getColumn(6).setPreferredWidth(this.WIDTH/10);
	   table.getColumnModel().getColumn(7).setPreferredWidth(this.WIDTH/10);
	   table.getColumnModel().getColumn(8).setPreferredWidth(this.WIDTH/20);
   }


   
}
