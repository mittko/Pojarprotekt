package Reports;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.TreeMap;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import run.JustFrame;
import utility.ArtikulsListComboBox;
import utility.ClientsListComboBox;
import utility.EditableField;
import utility.MainPanel;
import Local.TextReader;
import db.AcquittanceDB.AcuittanceParentDB;
import db.Artikul.Artikuli_DB;
import db.Invoice.InvoiceParent_DB;
import db.Report.ReportRequest;

public class ReportDialog extends MainPanel {
	private JPanel eastPanel = null;

	private JMenuBar menuBar = null;
	private JMenu menu = null;
	private ButtonGroup bGroup = null;
	private JRadioButtonMenuItem rbmi = null;
	private JRadioButtonMenuItem rbmi2 = null;
	private JRadioButtonMenuItem rbmi3 = null;
	private JRadioButtonMenuItem rbmi4 = null;
	private JRadioButtonMenuItem rbmi5 = null;
	private JRadioButtonMenuItem rbmi6 = null;
	private JRadioButtonMenuItem rbmi7 = null;

	private EditableField fromDate = null;
	private EditableField toDate = null;
	private EditableField so_field = null;
	private EditableField prot_field = null;
	private EditableField fact_field = null;
	private EditableField acquittanceField = null;
	private EditableField serial = null;
	private EditableField barcod = null;
	private ArtikulsListComboBox artikulsComboBox;
 //   private EditableField artikuliField = null;
    
	private ClientsListComboBox myCombo = null;

	private JPanel westPanel = null;
	private Object[] wheightFire = null;
	private Object[] brandFire = null;
	private JComboBox<Object> typeCombo = null;
	private JComboBox<Object> wheightCombo = null;
	private JComboBox<Object> catCombo = null;
	private JComboBox<Object> brandCombo = null;
    private JComboBox<Object> doingCombo = null;
	
	
	private JPanel basePanel = null;
	private JPanel moreWidthPanel = null;

	private JButton searchButton = null;
//	private final String hexColor = "0xFFBD0A";

	private String destination = null;
	public static final String SO_Title = "Сервизна Поръчка";
	public static final String Protokol_Title = "Протокол";
	public static final String Brack_Title = "Брак";
	private String title = null;
	private String invoiceTitle = null;
	private String No = "";
	public JustFrame clientFrame = null;
	public JustFrame reportTableFrame = null;
	public JustFrame invoiceTableFrame = null;

	private TreeMap<String, ParentInvoiceInfo> parentInvoiceMap = new TreeMap<String, ParentInvoiceInfo>();
	private TreeMap<String, ParentAcquittanceInfo> parentAcquittanceMap = new TreeMap<String, ParentAcquittanceInfo>();

	private ArrayList<Object[]> filterListByData = new ArrayList<Object[]>();
	public ReportDialog() {

	//	parentInvoiceMap = new TreeMap<String, ParentInvoiceInfo>();
	//	parentAcquittanceMap = new TreeMap<String, ParentAcquittanceInfo>();

		basePanel = new JPanel();

		basePanel.setOpaque(false);
		basePanel.setLayout(new GridLayout(1, 2, 100, 10));

		eastPanel = new JPanel();
		eastPanel.setOpaque(false);
		eastPanel.setLayout(new GridLayout(11, 1, 10, 10));

		menuBar = new JMenuBar();
		menuBar.setBorder(BorderFactory.createLineBorder(Color.black, 1));

		menu = new JMenu("Търсене във :                 ");
		menu.setCursor(new Cursor(Cursor.HAND_CURSOR));
		menu.setPreferredSize(new Dimension(230, 30));
		menu.setBorder(BorderFactory.createRaisedBevelBorder());

		bGroup = new ButtonGroup();
		rbmi = new JRadioButtonMenuItem("Сервизна Поръчка");
		rbmi.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				destination = SERVICE;
				title = rbmi.getText();
				 setComponentState(true,false,false, false,
				    		true,true,false,true, true,true,true,false);
				}

		});

		rbmi2 = new JRadioButtonMenuItem("Протоколи");
		rbmi2.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi2.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi2.getText();
				destination = PROTOKOL;
				setComponentState(false,true, false, false,
				    		true,true,false,true, true,true,true,true);
			}

		});
		rbmi3 = new JRadioButtonMenuItem("Брак");
		rbmi3.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				title = rbmi3.getText();
				destination = BRACK;
				setComponentState(false,true, false, false,
				    		true,true,false,true, true,true,true,false);
			}

		});
		rbmi4 = new JRadioButtonMenuItem("Фактури");
		rbmi4.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi4.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi4.getText();
				destination = INVOICE_CHILD;
				setComponentState(false,false, true, false,
				    		false,false,false,false, false,false,false,false);
			}

		});

		rbmi5 = new JRadioButtonMenuItem("Про-форма фактура");
		rbmi5.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi5.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi5.getText();
				destination = PROFORM_CHILD;
				setComponentState(false,false, true, false,
			    		false,false,false,false, false,false,false,false);
			}

		});

		rbmi6 = new JRadioButtonMenuItem("Стокови Разписки");
		rbmi6.setVisible(ACCESS_MENU[6]);
		rbmi6.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi6.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi6.getText();
				destination = ACQUITTANCE_CHILD;
				setComponentState(false,false, false, true,
				    		false,false,false,false, false,false,false,false);
			}

		});
		
		rbmi7 = new JRadioButtonMenuItem("Артикули");
		rbmi7.setCursor(new Cursor(Cursor.HAND_CURSOR));
		rbmi7.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				title = rbmi7.getText();
				destination = ARTIKULS;
				setComponentState(false,false, true, false,
				    		false,false,true,false, false,false,false,false);
			}

		});
		
		bGroup.add(rbmi);
		menu.add(rbmi);

		menu.addSeparator();

		bGroup.add(rbmi2);
		menu.add(rbmi2);
		menu.addSeparator();

		bGroup.add(rbmi3);
		menu.add(rbmi3);
		menu.addSeparator();

		bGroup.add(rbmi4);
		menu.add(rbmi4);
		menu.addSeparator();

		bGroup.add(rbmi5);
		menu.add(rbmi5);
		menu.addSeparator();

		bGroup.add(rbmi6);
		menu.add(rbmi6);
		menu.addSeparator();
		
		bGroup.add(rbmi7);
		menu.add(rbmi7);
		
		menuBar.add(menu);

		Dimension fieldDimension = new Dimension(20,40);
		
		fromDate = new EditableField("От XX.XX.XXXX", 12);
		fromDate.setPreferredSize(fieldDimension);

		toDate = new EditableField("До XX.XX.XXXX", 12);
		toDate.setPreferredSize(fieldDimension);

		so_field = new EditableField("Сервизна Поръчка", 12);
		so_field.setPreferredSize(fieldDimension);

		prot_field = new EditableField("Протокол", 12);
		prot_field.setPreferredSize(fieldDimension);

		fact_field = new EditableField("Фактура", 12);
		fact_field.setPreferredSize(fieldDimension);

		acquittanceField = new EditableField("Стокови Разписки", 12);
		acquittanceField.setVisible(ACCESS_MENU[6]);
		acquittanceField.setPreferredSize(fieldDimension);

		serial = new EditableField("Монтажен Номер", 12);
		serial.setPreferredSize(fieldDimension);

		barcod = new EditableField("Баркод", 12);
		barcod.setPreferredSize(fieldDimension);

		artikulsComboBox = new ArtikulsListComboBox();
		artikulsComboBox.setEnabled(false);
	//	artikulsComboBox.setPreferredSize(new Dimension(300,30));
	//	artikuliField = new EditableField("Артикул",12);
	//	artikuliField.setPreferredSize(fieldDimension);
		
		myCombo = new ClientsListComboBox();
		myCombo.setPreferredSize(new Dimension(230, 30));
		myCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		westPanel = new JPanel();
		westPanel.setOpaque(false);
		GridLayout westLayout = new GridLayout(11,1,10,10);
		westPanel.setLayout(westLayout);

		JLabel typeLabel = new JLabel("Вид");
		typeLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		typeCombo = new JComboBox<Object>(new Object[] { "",
				MainPanel.type_Prah_BC, MainPanel.type_Prah_ABC,
				MainPanel.type_Water, MainPanel.type_Water_Fame,
				MainPanel.type_CO2 });
		typeCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel wheightLabel = new JLabel("Маса");
		wheightLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		wheightFire = TextReader.getData("Local/wheight2.txt");
		wheightCombo = new JComboBox<Object>(wheightFire);
		wheightCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel catLabel = new JLabel("Категория");
		catLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		catCombo = new JComboBox<Object>(new Object[] { "", "1", "2", "3", "4",
				"5" });
		catCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		JLabel brandLabel = new JLabel("Марка");
		brandLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		brandFire = TextReader.getData("Local/brand2.txt");
		brandCombo = new JComboBox<Object>(brandFire);
		brandCombo.setBorder(BorderFactory.createLoweredBevelBorder());

		
		JLabel doingLabel = new JLabel("Вид обслужване");
		doingLabel.setBorder(BorderFactory.createLoweredBevelBorder());

		doingCombo = new JComboBox<Object>(new Object[] { "",
				"ТО","П","ХИ","ТО,П","ТО,П,ХИ" });
		doingCombo.setBorder(BorderFactory.createLoweredBevelBorder());
		
		searchButton = new JButton();
		searchButton.setText("Търсене");
		searchButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if (destination == null) {
					JOptionPane.showMessageDialog(null,
							"Не е посочено търсене!");
					return;
				}

				parentInvoiceMap.clear();
				
				parentAcquittanceMap.clear();
				
				SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {

					@Override
					protected Void doInBackground() throws Exception {
						// TODO Auto-generated method stub
						JDialog jDialog = ((JDialog) (SwingUtilities
								.getWindowAncestor(ReportDialog.this)));
						jDialog.setCursor(new Cursor(Cursor.WAIT_CURSOR));

						ArrayList<Object[]> data = null;

						if (destination.equals(SERVICE)
								|| destination.equals(PROTOKOL)
								|| destination.equals(BRACK)) {
							try {
								
								data = ReportRequest
										.getReports(buildCommandForSO_Table_Protokol_Brack(destination));
							} finally {
								switch (destination) {
								case SERVICE:
									title = SO_Title;
									break;
								case PROTOKOL:
									title = Protokol_Title;
									break;
								case BRACK:
									title = Brack_Title;
									break;
								default:
									break;
								}
								SwingUtilities.invokeLater(new EDTSO_Pr_Br(data,
										jDialog, No, "Справки " + title,destination));
								No = ""; // clear current number

							}
						} else if (destination.equals(INVOICE_CHILD)
								|| destination.equals(PROFORM_CHILD)) {
							try {
								// get info for parent
								String parentDestination = null;
								switch (destination) {
								case INVOICE_CHILD:
									parentDestination = INVOICE_PARENT;
									invoiceTitle = "Фактура";
									break;
								case PROFORM_CHILD:
									parentDestination = PROFORM_PARENT;
									invoiceTitle = "Проформа";
									break;
								default:
									break;
								}
								// get info for parent
								ArrayList<Object[]> parentInvoiceInfo = InvoiceParent_DB
										.getParentInfo(
												parentDestination,
												buildCommandForInvoiceParent(parentDestination));
                   
							
								
								for (int p = 0; p < parentInvoiceInfo.size(); p++) {
		
									parentInvoiceMap.put(
											parentInvoiceInfo.get(p)[0]
													.toString(),
											new ParentInvoiceInfo(
													parentInvoiceInfo.get(p)[0]
															.toString(),
													parentInvoiceInfo.get(p)[1]
															.toString(),
													parentInvoiceInfo.get(p)[2]
															.toString(),
													parentInvoiceInfo.get(p)[3]
															.toString(),
													parentInvoiceInfo.get(p)[4]
															.toString(),
													parentInvoiceInfo.get(p)[5]
															.toString(),
													parentInvoiceInfo.get(p)[6]
															.toString(),
					parentInvoiceInfo.get(p)[7] != null ? parentInvoiceInfo.get(p)[7].toString() : "-"	
													));
								}

								// get info for child
						data = ReportRequest 
										.getReports(buildCommandForInvoiceChild(destination));
								
								// FILTER DATA ACCORDINGLY DATE OF INVOICE
								filterListByData.clear();
								
								for(int i = 0;i < data.size();i++) {
									if(parentInvoiceMap.containsKey(data.get(i)[5].toString())) {
										filterListByData.add(data.get(i));
									}
								}
							} finally {

								SwingUtilities.invokeLater(new EDTInvoice(filterListByData,
										parentInvoiceMap, jDialog, No,
										"Справки " + invoiceTitle));
								No = "";

							}

						} else if (destination.equals(ACQUITTANCE_CHILD)) {

							try {
                                 String command = 
                                		 buildCommandForAcquittanceParent(
                                				 MainPanel.ACQUITTANCE_PARENT);
								ArrayList<Object[]> acquittanceParentInfo = AcuittanceParentDB
										.getInfoForAcquittanceParentDB(command);

								for (int p = 0; p < acquittanceParentInfo
										.size(); p++) {
									parentAcquittanceMap.put(
											acquittanceParentInfo.get(p)[0]
													.toString(),
											new ParentAcquittanceInfo(
													acquittanceParentInfo
															.get(p)[0]
															.toString(),
													acquittanceParentInfo
															.get(p)[1]
															.toString(),
													acquittanceParentInfo
															.get(p)[2]
															.toString(),
													acquittanceParentInfo
															.get(p)[3]
															.toString(),
													acquittanceParentInfo
															.get(p)[4]
															.toString()));
								}
								data = ReportRequest
										.getReports(buildCommandForAcquittanceChild(destination));
								
								
								// FILTER DATA ACCORDINGLY DATE OF ACCQUITANCE
								filterListByData.clear();
								
								for(int i = 0;i < data.size();i++) {
									if(parentAcquittanceMap.containsKey(data.get(i)[5].toString())) {
										filterListByData.add(data.get(i));
									}
								}
							} finally {
								EDTAcquitance edt3 = new EDTAcquitance(filterListByData,parentAcquittanceMap,
										jDialog, "Справки Стокова Разписка");
								SwingUtilities.invokeLater(edt3);
								
							}
						} else if(destination.equals(ARTIKULS)) {
							ArrayList<Object[]> dataa = ReportRequest.getReports(buildSearchCommandForArtikuls());
							EDTArtikuls edt3 = new EDTArtikuls(dataa,jDialog, "Артикули");
							SwingUtilities.invokeLater(edt3);
						}

						return null;
					}

				};
				sw.execute();
			}

		});

		searchButton.setPreferredSize(new Dimension(200, 30));

		eastPanel.add(menuBar);

		JLabel emptyLabel = new JLabel(" Клиенти ");
		emptyLabel.setBorder(BorderFactory.createLoweredBevelBorder());
		
		eastPanel.add(myCombo);
		eastPanel.add(fromDate);
		eastPanel.add(toDate);
		eastPanel.add(so_field);
		eastPanel.add(prot_field);
		eastPanel.add(fact_field);
		eastPanel.add(acquittanceField);
		eastPanel.add(serial);
		eastPanel.add(barcod);
        eastPanel.add(artikulsComboBox);//(artikuliField);
        
		westPanel.add(typeLabel);
		westPanel.add(typeCombo);
		westPanel.add(wheightLabel);
		westPanel.add(wheightCombo);
		westPanel.add(catLabel);
		westPanel.add(catCombo);
		westPanel.add(brandLabel);
		westPanel.add(brandCombo);
		// test
		westPanel.add(doingLabel);
		westPanel.add(doingCombo);
		
	//	westPanel.add(new JLabel());
		westPanel.add(searchButton);

		basePanel.add(eastPanel);
		basePanel.add(westPanel);

		moreWidthPanel = new JPanel();//GradientPanel();

		moreWidthPanel.add(basePanel);
		moreWidthPanel.setBorder(BorderFactory.createLineBorder(Color.black));
		
		setComponentState(false,false, false, false,
	    		false,false,false,false, false,false,false,false);
		this.add(moreWidthPanel);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				// TODO Auto-generated method stub
				ReportDialog r = new ReportDialog();
				JustFrame f = new JustFrame(r);
				f.setTitle("Справки");
				f.pack();
			}

		});
	}

	private String buildCommandForSO_Table_Protokol_Brack(String dest) {

		StringBuilder mainCommand1 = new StringBuilder();
		StringBuilder mainCommand2 = new StringBuilder();
		boolean flag = false;
        String selectWhat = "";
		switch(dest) {
		case SERVICE : 
			selectWhat = "select client, type, wheight, barcod, serial, category, brand, "
					+ "T_O, P, HI, done, number, person, date from ";
			break;
		case PROTOKOL: 
			selectWhat ="select client, type, wheight, barcod, serial, category, brand,"	
		+ " T_O, P, HI, parts, value, number, person, date from ";
			break;
		case BRACK : 
			selectWhat = "select * from ";
			break;
		default: break;
		}
		
		mainCommand1.append(selectWhat + dest); //"select * from "

		mainCommand2.append(" where ");
		// String command3 = "?";

		if (!myCombo.getSelectedItem().equals("")) {
			mainCommand2.append("client like " + "'"
					+ myCombo.getSelectedItem() + "'");
			flag = true;
		}

		if (!so_field.getText().isEmpty()) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("substr(barcod,1,10) like " + "'"
					+ so_field.getText() + "'");
			flag = true;
			No = so_field.getText();
		} else if (!prot_field.getText().isEmpty()) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			if (dest.equals(PROTOKOL)) {
				mainCommand2.append("number like " + "'" + prot_field.getText()
						+ "'");
			} else {
				mainCommand2.append("number like " + "'" + prot_field.getText()
						+ "'");
			}
			flag = true;
			No = prot_field.getText();
		}

		if (!typeCombo.getSelectedItem().equals("")) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("type like " + "'"
					+ typeCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!wheightCombo.getSelectedItem().equals("")) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("wheight like " + "'"
					+ wheightCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!catCombo.getSelectedItem().equals("")) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("category like " + "'"
					+ catCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!brandCombo.getSelectedItem().equals("")) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("brand like " + "'"
					+ brandCombo.getSelectedItem() + "'");
			flag = true;
		}
		
       if(doingCombo.isEnabled() &&  !doingCombo.getSelectedItem().equals("")) {
    	   if(flag) {
    		   mainCommand2.append(" and ");
    	   }
    	   String selectedItem = doingCombo.getSelectedItem().toString() ;
    
			if (selectedItem.equals("ТО")) {
				mainCommand2.append("T_O not like 'не' and P like 'не' and HI like 'не'");
			} else if (selectedItem.equals("П")) {
				mainCommand2.append("P not like 'не' and T_O like 'не' and HI like 'не'");
			} else if (selectedItem.equals("ХИ")) {
				mainCommand2.append("HI not like 'не' and T_O like 'не' and P like 'не'");
			} else if (selectedItem.equals("ТО,П")) {
				mainCommand2.append("T_O not like 'не' and P not like 'не' and HI like 'не'");
			} else if (selectedItem.equals("ТО,П,ХИ")) {
				mainCommand2.append("T_O not like 'не' and P not like 'не' and HI not like 'не'");
			}
    	   
			flag = true;
       } else {
    	  // do nothing
       }
		if (!serial.getText().isEmpty()) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("serial like " + "'" + serial.getText() + "'");
			flag = true;
			No = serial.getText();
		} else if (!barcod.getText().isEmpty()) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append("barcod like " + "'" + barcod.getText() + "'");
			flag = true;
			No = barcod.getText();
		}
		// add date
		String date = "date";

		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (flag) {
				mainCommand2.append(" and ");
			}
			mainCommand2.append(date + " between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			flag = true;
		}

		if (flag) {
			mainCommand1.append(mainCommand2);
		}
		
//	  if (destination.equals(SERVICE) || destination.equals(PROTOKOL)) {
//			if (flag) {
//			mainCommand1.append(" and ");
//			} else {
//				mainCommand1.append(" where ");
//			}
//			mainCommand1.append("uptodate like 'not null'");
//		}

		// add sorting
		mainCommand1.append(" order by number");
		
		return mainCommand1.toString();
	}
  
	
	//
	private String buildCommandForInvoiceChild(String destination_db) {
		StringBuilder sb = new StringBuilder();

		sb.append("select make, med, quantity, price, value, id from "
				+ destination_db);
		boolean flag = false;
		if (!myCombo.getSelectedItem().equals("")) {
			sb.append(" where client like '" + myCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!fact_field.getText().isEmpty()) {
			if (flag) {
				sb.append(" and ");
			} else {
				sb.append(" where ");
			}
			sb.append(" id = " + "'" + fact_field.getText() + "'");
			
		}
		
		sb.append(" order by id");
		return sb.toString();
	}

	private String buildCommandForInvoiceParent(String dest) {
		StringBuilder sb = new StringBuilder();

		boolean flag = false;

		sb.append("select * from " + dest);

		if (!myCombo.getSelectedItem().equals("")) {
			sb.append(" where client = '" + myCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!fact_field.getText().isEmpty()) {
			if (flag) {
				sb.append(" and ");
			} else {
				sb.append(" where ");
			}
			sb.append(" id like " + "'" + fact_field.getText() + "'");
			flag = true;
		}
		// add date
	 	String date = "date";
		
			if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
				if (flag) {
					sb.append(" and ");
				} else {
					sb.append(" where ");
				}
			 sb.append(date + " between " + "Date('" + fromDate.getText()
						+ "')" + " and " + "Date('" + toDate.getText() + "')");
			//	flag = true;
			}
		return sb.toString();
	}

	private String buildCommandForAcquittanceChild(String destination_db) {
		StringBuilder sb = new StringBuilder();

		sb.append("select artikul, med, quantity, price, value, id from "
				+ destination_db);
		boolean flag = false;
		if (!myCombo.getSelectedItem().equals("")) {
			sb.append(" where client like '" + myCombo.getSelectedItem() + "'");
			flag = true;
		}
		if (!acquittanceField.getText().isEmpty()) {
			if (flag) {
				sb.append(" and ");
			} else {
				sb.append(" where ");
			}
			sb.append(" id like " + "'" + acquittanceField.getText()+"'");
		}
        sb.append(" order by id");
		return sb.toString();
	}
	private String buildCommandForAcquittanceParent(String destDB) {
		StringBuilder sb = new StringBuilder();
		boolean flag = false;
		sb.append("select * from " + MainPanel.ACQUITTANCE_PARENT);
		if (!myCombo.getSelectedItem().equals("")) {
			sb.append(" where client like '" + myCombo.getSelectedItem() + "'");
			flag = true;
		}
		String date = "date";
		
		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
			if (flag) {
				sb.append(" and ");
			} else {
				sb.append(" where ");
			}
		 sb.append(date + " between " + "Date('" + fromDate.getText()
					+ "')" + " and " + "Date('" + toDate.getText() + "')");
			flag = true;
		}
		return sb.toString();
	}
	
	private String buildSearchCommandForArtikuls() {
		StringBuilder mainCommand1 = new StringBuilder();
		StringBuilder mainCommand2 = new StringBuilder();
		mainCommand2.append(" where ");
		boolean flag = false;
        String selectWhat = "select * from " + ARTIKULS;
	
		mainCommand1.append(selectWhat); //"select * from "

		if (!myCombo.getSelectedItem().equals("")) {
			mainCommand2.append("client like " + "'"
					+ myCombo.getSelectedItem() + "'");
			flag = true;
		}
//
//		 if (!prot_field.getText().isEmpty()) {
//			if (flag) {
//				mainCommand2.append(" and ");
//			}
//			if (dest.equals(PROTOKOL)) {
//				mainCommand2.append("number like " + "'" + prot_field.getText()
//						+ "'");
//			} else {
//				mainCommand2.append("number like " + "'" + prot_field.getText()
//						+ "'");
//			}
//			flag = true;
//			No = prot_field.getText();
//		}

	

		// add date
//		String date = "date";
//
//		if (!fromDate.getText().isEmpty() && !toDate.getText().isEmpty()) {
//			if (flag) {
//				mainCommand2.append(" and ");
//			}
//			mainCommand2.append(date + " between " + "Date('" + fromDate.getText()
//					+ "')" + " and " + "Date('" + toDate.getText() + "')");
//			flag = true;
//		}
//
		if (flag) {
			mainCommand1.append(mainCommand2);
		}
		

		// add sorting
		mainCommand1.append(" order by invoice");
		
		return mainCommand1.toString();
	}
    private void setComponentState(boolean so,boolean prot, boolean fact, boolean acq,
    		boolean ser,boolean bar,boolean artikul,boolean type, boolean whei,boolean cat,boolean brand,
    		boolean doing) {
    	so_field.setEditable(so);
    	prot_field.setEditable(prot);
    	fact_field.setEditable(fact);
    	acquittanceField.setEditable(acq);
    	serial.setEditable(ser);
    	barcod.setEditable(bar);
    	artikulsComboBox.setEnabled(artikul);//  artikuliField.setEditable(artikul);
    	typeCombo.setEnabled(type);
		wheightCombo.setEnabled(whei);
		catCombo.setEnabled(cat);
		brandCombo.setEnabled(brand);
	    doingCombo.setEnabled(doing);
	    
    }
}
